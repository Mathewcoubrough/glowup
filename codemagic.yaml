workflows:
  ios_appstore:
    name: iOS App Store (Capacitor)
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      xcode: 15.4
      vars:
        # Known values for your app/team
        BUNDLE_ID: com.mathe.glowup
        TEAM_ID: 6Z68YP5J8N
        PROFILE_NAME: GlowUp_AppStore
        # Xcode project bits
        XCODE_WORKSPACE: ios/App/App.xcworkspace
        XCODE_SCHEME: App

    scripts:
      - name: Show repo & tool versions
        script: |
          set -euxo pipefail
          pwd; ls -la
          node -v || true
          npm -v || true
          ruby -v || true
          pod --version || true

      - name: Ensure minimal web + Capacitor config
        script: |
          set -euxo pipefail
          # Create tiny app skeleton if missing so the build has inputs
          test -f package.json || echo '{ "name":"glowup","version":"1.0.0","private":true }' > package.json
          test -f capacitor.config.json || cat > capacitor.config.json <<'EOF'
          {
            "appId": "com.mathe.glowup",
            "appName": "GlowUp Money",
            "webDir": "web",
            "bundledWebRuntime": false
          }
          EOF
          mkdir -p web
          test -f web/index.html || echo '<!doctype html><title>GlowUp</title><body>Build</body>' > web/index.html

      - name: Install JS deps & Capacitor
        script: |
          set -euxo pipefail
          npm i -D @capacitor/cli @capacitor/core @capacitor/ios

      - name: Add & sync iOS
        script: |
          set -euxo pipefail
          npx cap add ios || true
          npx cap sync ios
          ls -la ios || true
          ls -la ios/App || true

      - name: Install CocoaPods
        script: |
          set -euxo pipefail
          cd ios/App
          pod install --no-repo-update
          cd ../..

      - name: Check required signing env vars
        script: |
          set -euxo pipefail
          : "${IOS_CERT_P12_BASE64:?Set IOS_CERT_P12_BASE64 in Environment variables}"
          : "${IOS_CERT_PASSWORD:?Set IOS_CERT_PASSWORD in Environment variables}"
          : "${IOS_PROFILE_BASE64:?Set IOS_PROFILE_BASE64 in Environment variables}"

      - name: Install signing files (ios_dist.p12.pfx / GlowUp_AppStore.mobileprovision)
        script: |
          set -euxo pipefail
          # Write your secrets to files with the exact names you asked for
          echo "$IOS_CERT_P12_BASE64" | base64 --decode > ios_dist.p12.pfx
          echo "$IOS_PROFILE_BASE64"  | base64 --decode > GlowUp_AppStore.mobileprovision

          # Create a throwaway keychain and import the .p12 (password from IOS_CERT_PASSWORD)
          KEYCHAIN=build.keychain-db
          PASS=secret123
          security create-keychain -p "$PASS" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$PASS" "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$PASS" "$KEYCHAIN"
          security import ios_dist.p12.pfx -k "$KEYCHAIN" -P "$IOS_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security

          # Install the provisioning profile with the exact filename you asked for
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/GlowUp_AppStore.mobileprovision"
          cp GlowUp_AppStore.mobileprovision "$PROFILE_PATH"

          # Read profile info (helps avoid mismatches)
          PROFILE_PLIST="$(security cms -D -i "$PROFILE_PATH")"
          mkdir -p build
          echo "$PROFILE_PLIST" > build/profile.plist
          APPID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' build/profile.plist || true)
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' build/profile.plist || true)
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' build/profile.plist || true)
          TEAMINPROF=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' build/profile.plist || true)
          BUNDLE_FROM_PROF="${APPID#*.}"

          echo "Profile: $NAME ($UUID)"
          echo "Bundle in profile: $BUNDLE_FROM_PROF"
          echo "Team in profile:   $TEAMINPROF"

          # If the profile says a different bundle id or team, prefer the profile values
          if [ -n "$BUNDLE_FROM_PROF" ] && [ "$BUNDLE_FROM_PROF" != "$BUNDLE_ID" ]; then
            echo "BUNDLE_ID=$BUNDLE_FROM_PROF" >> $CM_ENV
            echo "Adjusted BUNDLE_ID to $BUNDLE_FROM_PROF based on profile."
          fi
          if [ -n "$TEAMINPROF" ] && [ "$TEAMINPROF" != "$TEAM_ID" ]; then
            echo "TEAM_ID=$TEAMINPROF" >> $CM_ENV
            echo "Adjusted TEAM_ID to $TEAMINPROF based on profile."
          fi

      - name: Force Info.plist bundle id + version
        script: |
          set -euxo pipefail
          PLIST=ios/App/App/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier ${BUNDLE_ID}" "$PLIST" || /usr/libexec/PlistBuddy -c "Add :CFBundleIdentifier string ${BUNDLE_ID}" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string 1.0.0" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString 1.0.0" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${BUILD_NUMBER}" "$PLIST" || true
          echo "----- Info.plist after edits -----"
          /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST" || true

      - name: Archive (Release)
        script: |
          set -euxo pipefail
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/App.xcarchive \
            clean archive \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME"

      - name: Export IPA
        script: |
          set -euxo pipefail
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict></plist>
          EOF
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build

    artifacts:
      - build/*.ipa
