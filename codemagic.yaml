workflows:
  ios_appstore:
    name: iOS App Store (Capacitor)
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      xcode: 15.4
      vars:
        BUNDLE_ID: com.mathe.glowup
        XCODE_WORKSPACE: ios/App/App.xcworkspace
        XCODE_SCHEME: App

    scripts:
      - name: Prepare Node project & Capacitor scaffold
        script: |
          set -euxo pipefail
          # Create a minimal Node project if missing
          if [ ! -f package.json ]; then
            cat > package.json <<'JSON'
          { "name": "glowup", "version": "1.0.0", "private": true }
          JSON
          fi
          # Make a lockfile (so no npm ci error), then install what we need
          npm install --package-lock-only || true
          npm i -D @capacitor/cli @capacitor/core @capacitor/ios
          # Minimal web so iOS has content to bundle
          mkdir -p web
          [ -f web/index.html ] || echo '<!doctype html><title>GlowUp</title><body>âœ… Hello</body>' > web/index.html
          # Capacitor config (safe if already exists)
          [ -f capacitor.config.json ] || cat > capacitor.config.json <<'JSON'
          { "appId":"com.mathe.glowup","appName":"GlowUp Money","webDir":"web","bundledWebRuntime":false }
          JSON

      - name: Add & sync iOS
        script: |
          set -euxo pipefail
          npx cap add ios || true
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -euxo pipefail
          cd ios/App
          pod install --no-repo-update
          cd ../..

      - name: Install code signing identities from Codemagic UI
        script: |
          set -euxo pipefail
          # This pulls in the .p12 and .mobileprovision you uploaded in the app's Code signing identities
          keychain initialize
          keychain add-certificates
          # Find a provisioning profile that matches our bundle id
          PROF_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          MATCH=""
          for f in "$PROF_DIR"/*.mobileprovision; do
            APPID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /dev/stdin <<< "$(security cms -D -i "$f")" || true)
            if [[ "$APPID" == *".${BUNDLE_ID}" ]]; then
              MATCH="$f"
              break
            fi
          done
          if [ -z "$MATCH" ]; then
            echo "No provisioning profile found for bundle id $BUNDLE_ID"
            ls -la "$PROF_DIR" || true
            exit 1
          fi
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< "$(security cms -D -i "$MATCH")")
          TEAM=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' /dev/stdin <<< "$(security cms -D -i "$MATCH")")
          echo "Using profile: $NAME (Team: $TEAM)"
          # Persist for later steps
          echo "PROFILE_NAME=$NAME" >> $CM_ENV
          echo "TEAM_ID=$TEAM"     >> $CM_ENV

      - name: Force bundle id & version in Info.plist
        script: |
          set -euxo pipefail
          PLIST=ios/App/App/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" "$PLIST" || /usr/libexec/PlistBuddy -c "Add :CFBundleIdentifier string $BUNDLE_ID" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string 1.0.0" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString 1.0.0" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${BUILD_NUMBER}" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Print" "$PLIST" | sed -n '1,120p' || true

      - name: Build archive (Release)
        script: |
          set -euxo pipefail
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/App.xcarchive \
            clean archive \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME"

      - name: Export IPA
        script: |
          set -euxo pipefail
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict></plist>
          EOF
          xcodebuild -exportArchive -archivePath build/App.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath build

    artifacts:
      - build/*.ipa

    publishing:
      app_store_connect:
        apple_id: $APPLE_ID
        password: $APP_SPECIFIC_PASSWORD
        submit_to_testflight: true
